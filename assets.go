// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/enum.tmpl
// template/interface.tmpl
// template/scalar.tmpl
// template/schema.graphql
// template/schema.tmpl
package graphqldoc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateEnumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x8b\xdb\x30\x14\x84\xef\xfa\x15\x03\xb9\xb4\x90\xea\x4f\x34\x29\x04\x4a\x52\x9a\x52\xe8\x4d\xb2\x3d\x6e\x54\x6c\xc9\xe8\xc9\xa5\x41\xd6\x7f\x2f\xf6\xc6\x9b\x64\x0f\xfb\x0e\xd2\x63\x66\x24\x7d\xe2\x6d\xb0\xf7\x63\x2f\x6a\x59\x11\x39\x44\x0a\x7d\xc2\x10\x44\x5c\xd5\x11\xc2\x24\x08\x2d\xfe\xda\x6e\xa4\xa0\x0d\x11\x16\xad\x63\xd7\x68\xa5\xbe\x84\x08\xfe\xb3\xfd\xd0\x71\x8b\x74\x21\xcc\x41\x64\xa4\x41\xa8\xfe\xb0\x4e\xb8\x58\x59\xd3\xa8\x6d\xd7\xb1\x81\x91\x64\x13\x8d\xc6\x8f\x0b\xb1\xf4\x70\x02\xeb\x41\x3f\xf6\xf8\x20\x03\x6b\xd7\xba\x39\x7c\xdd\xce\xef\xa6\xeb\xb0\x5e\x7b\x5e\x4e\x7e\x44\xc5\xda\x8e\x42\xb8\x84\xde\x5e\x51\x11\xe6\xf4\x6d\x7f\x34\x08\x11\xe6\xf3\xd7\xd3\x79\xbf\x33\x5a\xe5\x1c\xad\xff\x4d\xe8\x52\xd4\x66\x83\x9c\xf5\xd1\xf6\x2c\x45\xe5\xac\x77\x94\x3a\xba\x21\xb9\xe0\x4b\x51\x6a\xc2\xcf\xf9\x77\xc0\x84\x07\x07\xcf\x35\x7b\x43\x64\x6d\x13\x9b\x55\xf9\x4e\x2b\xc1\x63\x52\x13\x3e\xad\x85\x87\xfe\x3d\xf1\x49\xc2\x74\xe7\x9d\x47\xb1\xf0\x48\x29\x13\xcc\x2b\xb8\xc1\x84\xb7\xec\x8b\xe4\x5a\xe8\x83\xdc\xe9\x4a\xf9\x45\xc9\x99\x9d\xb0\x94\x63\xc8\x99\xbe\xb9\x45\xf5\x9a\x72\xc1\xbf\xc0\xcf\x86\xba\x45\x6e\xdb\xff\x00\x00\x00\xff\xff\xbe\x3f\x7c\x02\x14\x02\x00\x00")

func templateEnumTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateEnumTmpl,
		"template/enum.tmpl",
	)
}

func templateEnumTmpl() (*asset, error) {
	bytes, err := templateEnumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/enum.tmpl", size: 532, mode: os.FileMode(420), modTime: time.Unix(1563579834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInterfaceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\xc1\x6e\xd4\x30\x10\xbd\xfb\x2b\x9e\xb4\x1c\x40\x02\x7f\x00\x12\x87\x4a\xa8\xd2\x4a\xd0\x43\xc5\x05\x21\xa4\x38\xce\x4b\x62\x9a\xd8\xc1\xe3\xa5\x54\x8e\xff\x1d\x25\xcd\x76\x37\x07\x3a\x87\xcc\xe4\xcd\x9b\x79\xf3\x7c\xc0\xd1\x27\xc6\xd6\x58\x8a\xba\x94\x10\xc6\x3f\x84\x11\x4c\x26\xd2\x27\x84\xfa\x17\x6d\x12\xb4\x31\x8c\x78\xec\x9d\xed\x11\x52\xcf\xf8\xd2\xb0\xc6\xc3\xf9\x9e\xd1\x25\xad\xd4\x6d\x88\xe0\x5f\x33\x4e\x03\xdf\xa3\xfa\x12\xec\x83\xa9\x07\x56\x70\x82\x95\xb7\xe9\xa0\xa6\x35\x27\x21\xea\x90\x7a\x54\x47\x91\x13\x2b\x18\xdf\xa0\xfa\xca\xd8\xf1\x9e\xbf\x4f\x94\x54\xed\x54\x6a\x62\x08\xf6\x81\x8d\xc6\xcd\xf5\xae\xde\x08\x5c\x12\x84\x47\x8f\xc1\x49\x42\x68\xe1\xcd\xc8\x06\xad\xe3\xd0\x08\x52\x6f\x12\x4c\x24\xa4\x37\x91\x0d\xea\x27\xb8\xe5\xc2\x91\x3e\x39\xdf\x9d\x45\xb4\xca\x39\x1a\xdf\x11\xba\x14\x75\x38\x20\x67\x7d\x67\x46\x96\xa2\x72\xd6\x9f\x29\x36\xba\x29\xb9\xe0\x4b\x51\x6a\xc6\x4d\xec\x4e\xcb\x06\x60\xc6\xb7\xa7\x89\x4b\xbe\x22\x61\x1f\x4b\x6f\x8a\xb4\x26\xb1\x39\x23\xf7\x34\x12\x3c\x66\x35\xe3\xc3\x39\xf0\x9f\xfa\x35\x70\x07\x61\xbe\xd8\xb8\x5d\xfd\x97\x32\xa3\x7a\xf1\x52\x61\x46\xce\x6f\x12\x3e\x7e\x42\xc7\xb4\x5e\xae\x97\x6f\x29\x3f\x16\x7c\xab\x7f\xbe\x5d\x7f\x9e\x67\xde\x2d\x23\xfb\x17\x58\xb7\xb8\x16\xfa\x28\x17\x63\xa5\x7c\xa7\xe4\xcc\x41\x58\xca\x5d\xc8\x99\xbe\xd9\xa8\xfa\xcc\x72\xc1\x3f\xfb\x5e\x1a\x6a\xa3\x6c\xe9\x5f\x00\x00\x00\xff\xff\xaa\x16\xe3\x7b\x95\x02\x00\x00")

func templateInterfaceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInterfaceTmpl,
		"template/interface.tmpl",
	)
}

func templateInterfaceTmpl() (*asset, error) {
	bytes, err := templateInterfaceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/interface.tmpl", size: 661, mode: os.FileMode(420), modTime: time.Unix(1563579834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateScalarTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x6a\xc4\x30\x10\x04\xd0\x5e\x5f\x31\xe0\xd6\xf8\x03\xd2\x25\x1c\x09\x86\x10\x12\xae\x48\xab\x8d\xbd\x67\x2f\xc8\x2b\xb3\x92\x0e\x8c\xd0\xbf\x87\x38\x57\xcd\x63\x98\x62\x3a\x5c\x27\x0a\x64\xc9\x3d\x12\x64\x8c\xdd\x64\x93\x2c\x77\xc6\x9d\x42\xe1\xf4\x04\x3f\x6a\xf6\x3d\xfc\x6b\x88\x74\xe2\x9a\x4d\x74\xf9\xd3\x4b\x8c\x81\x49\x7d\x8f\x68\xf0\xe3\xc5\x0f\xce\x7d\xaf\xac\x98\x28\x04\xd1\x05\x79\x65\xbc\x19\xed\xeb\xd7\x3b\x9e\x3f\xc7\x1e\x47\x2c\xd8\x4a\xca\x48\x3b\x4f\x72\x3b\xa0\x9c\x32\xcf\x48\xe5\xe7\x26\x1c\xe6\x84\xa2\x59\xc2\xb9\x33\xce\xc5\x14\x51\xc3\x81\xf4\x7f\x71\x70\xb5\x1a\xe9\xc2\x18\x5a\x73\x5d\x87\x5a\x87\x0f\xda\xb8\x35\x57\xeb\x70\xe1\x34\x99\xec\x59\xa2\x9e\x05\xeb\xdc\xda\x6f\x00\x00\x00\xff\xff\x0e\x53\x5d\x14\xe7\x00\x00\x00")

func templateScalarTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateScalarTmpl,
		"template/scalar.tmpl",
	)
}

func templateScalarTmpl() (*asset, error) {
	bytes, err := templateScalarTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/scalar.tmpl", size: 231, mode: os.FileMode(420), modTime: time.Unix(1563579834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4d\x6e\xc3\x20\x10\x85\xf7\x3e\x05\xcb\x76\x93\x03\x74\x5d\x45\xca\xaa\x6a\x14\x75\x6b\x11\x33\xa4\xa8\x78\xa0\xfc\x54\x8a\x22\xdf\xbd\x82\x10\x33\x38\x6a\x6b\x75\x93\x98\xf1\xc7\xbc\xf7\x06\xfc\x19\xc1\x9d\xd9\x0e\x83\x33\xde\xc2\x10\x94\xc1\xd7\x5c\xba\x74\x8c\xf5\xbd\x1f\xde\x61\xe4\x79\xc1\x58\x66\x0f\x67\x0b\x65\xcd\xd8\x66\xb3\xd9\x46\xad\x53\x2d\x57\xa6\xfc\x3b\xc6\xc0\x53\xa3\x15\xa8\x8f\x47\x3f\x38\x65\x57\xe2\xe1\x6c\xc1\xff\xc1\x08\xe5\x52\x8e\x2f\x02\x22\x1f\xa1\x3c\x0a\x98\xf5\x4a\x85\xbb\x53\x25\x73\xd3\x1d\xda\x18\xde\xb8\x8e\xb7\x4d\x53\xf9\x37\xf8\x62\xc1\x71\xb2\xd9\xe0\xd6\xf1\xd3\x08\x18\x6a\x41\x81\x16\xb3\x9f\xa9\x9b\xba\x4e\x16\x86\xdd\xec\x32\x83\xac\xef\xe7\xc0\x1f\x0a\xd3\x8e\x62\xb3\xb5\x28\x53\x3b\xff\xa0\x70\xd0\x51\xc0\x33\x58\x07\x03\x0f\x20\x9e\x58\x70\x11\x1e\x8b\xf3\x39\xe1\x32\x5f\x93\xee\x3e\x5b\x1d\x2b\x85\x92\xb1\x3d\x48\x42\x28\x5f\x95\x8b\xce\x75\xa9\x0c\xee\x81\xfb\xac\x96\x50\x95\xfa\xe7\x11\xdc\x64\x97\xa2\x57\x2a\x80\x93\x7c\x00\x02\x55\xd1\x44\x00\xc6\x31\xef\xf8\x7f\xf4\xd5\x9e\xad\xf1\x5e\x1d\x35\x1c\xc8\xed\x5a\x18\xa2\x87\x58\xd3\x5c\x8f\x91\xac\x2f\x3f\x9d\x22\x99\xf0\x5d\x54\x01\x92\x47\x5d\xe6\x43\x85\x0a\xf6\xeb\x65\x31\x92\x7c\x36\xe5\x15\x99\x49\xf3\x9a\x00\xcd\x37\xb1\x80\x1a\xac\x01\xa7\xe6\x5a\x7f\x07\x00\x00\xff\xff\x28\x06\x24\x6e\x3b\x04\x00\x00")

func templateSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_templateSchemaGraphql,
		"template/schema.graphql",
	)
}

func templateSchemaGraphql() (*asset, error) {
	bytes, err := templateSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/schema.graphql", size: 1083, mode: os.FileMode(420), modTime: time.Unix(1563583985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSchemaTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\xc1\x6a\xc3\x30\x0c\xbd\xe7\x2b\x1e\x2c\x87\xd6\x74\xfe\x80\xc0\x0e\x85\x32\xd8\x65\x87\xb1\x5b\x19\x38\x34\x6a\x66\x68\xdd\x90\x64\xb0\x61\xfb\xdf\x87\x15\x25\x4d\xe8\x58\x7d\x48\x24\x59\x4f\x4f\xef\xf9\x01\xde\xeb\xd7\xf2\x4c\x31\x66\xde\xeb\x1d\x75\x87\xd6\x36\xbd\xbd\xb8\x18\xbd\x6f\x4b\x57\x13\xf4\xb3\xa5\x53\xd5\xa5\x42\xde\x7f\xd2\xfb\x4f\x43\x28\x9e\x50\x53\xcf\xa1\x4e\x5f\x86\xdb\x23\xf4\x4b\xb7\xa3\xa6\xa5\x43\xd9\x53\x15\xa3\xb9\x26\xc6\x7b\x72\x55\x8c\x50\x6a\xa2\x54\x0a\xab\x91\x25\xb7\xae\xa2\xef\x0d\x72\x3a\xd1\x99\x5c\x9f\x28\xf4\xb6\xad\x99\xd7\x1e\xe5\x3e\xc6\x0d\x64\x90\xf1\x7e\xec\x95\x71\xa6\x40\x5a\x71\xbe\xdc\xd4\x31\x2c\xb9\x4f\xf7\x12\x7f\xac\x38\x19\xa0\x6b\x19\xba\x46\x81\xfd\x55\xe7\xa2\x55\x4a\x02\xf8\x53\xaf\x62\x0f\x87\xdc\x5e\xdc\x1b\x95\x5d\x72\x52\xc9\xf4\xec\xc6\xe3\x2c\x60\xdb\xd6\x5f\x2c\x18\x01\xbc\xf3\xf2\x04\xcc\x00\x52\xca\x02\x1e\xc7\x83\x59\xfc\x5f\x11\x21\x9b\x1e\x74\xb0\x35\xc0\x4c\x2f\x61\x10\x6e\xbc\xbb\xeb\x19\x63\x96\x7a\x98\x85\xb5\xca\xef\x37\x00\x00\xff\xff\x79\x0f\x83\xf6\x61\x02\x00\x00")

func templateSchemaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSchemaTmpl,
		"template/schema.tmpl",
	)
}

func templateSchemaTmpl() (*asset, error) {
	bytes, err := templateSchemaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/schema.tmpl", size: 609, mode: os.FileMode(420), modTime: time.Unix(1563579834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/enum.tmpl":      templateEnumTmpl,
	"template/interface.tmpl": templateInterfaceTmpl,
	"template/scalar.tmpl":    templateScalarTmpl,
	"template/schema.graphql": templateSchemaGraphql,
	"template/schema.tmpl":    templateSchemaTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"enum.tmpl":      &bintree{templateEnumTmpl, map[string]*bintree{}},
		"interface.tmpl": &bintree{templateInterfaceTmpl, map[string]*bintree{}},
		"scalar.tmpl":    &bintree{templateScalarTmpl, map[string]*bintree{}},
		"schema.graphql": &bintree{templateSchemaGraphql, map[string]*bintree{}},
		"schema.tmpl":    &bintree{templateSchemaTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
